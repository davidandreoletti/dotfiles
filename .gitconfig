[core]
    fileMode = true
    editor = vim
    exculdesfile = ~/.gitignore-global-custom
    # Set pager to display raw control characters
    # http://michael.otacoo.com/linux-2/avoid-escape-characters-in-git/
    pager = "less -r"

[push]
    # Push CURRENT branch to upstream branch
    # - works if both branchs have different names or same names
    # http://longair.net/blog/2011/02/27/an-asymmetry-between-git-pull-and-git-push/
    default = "upstream"

[color]
    ui = true

[alias]
    co = checkout
    st = status
    br = branch
    type = cat-file -t
    dump = cat-file -p
    graph = log --graph
    s = show -p

    # Checkout myfile from a stash 0
    # Usage: cosf 0 myfile
    cosf = "!f() {git checkout stash@{$1} -- $2 ; }; f"

    # Checkout myfile from stash 0 as myfile2 
    # Usage: cosfas 0 myfile myfile2
    cosfas = "!f() {git show stash@{$1}:$2 $3 ; }; f"

    # Show help for a command
    # Usage: git hp commit
    hp = help

    # Commit with message
    # Usage: git ci "some message"
    ci = commit

    # Undo last LOCAL commit, effectively leaving the working tree as it was BEFORE the commit
    # Usage: git cul
    cul = reset --soft HEAD~1

    # Delele local branch
    # Usage: git bdl somebranch
    bdl = branch -d 

    # Delete remote branch
    # Usage: git bdr somebranch
    bdr = "!f() { git push origin :$1 ; }; f"

    # show stash list
    sthl = stash list

    # apply stash@{somenumber} 
    # Usage: git stha 0   --> apply stash@{0}
    stha = "!f() { git stash apply stash@{$1}; }; f"

    # show stash@{somenumber} as patch
    # Usage: git sthp 0   --> show stash@{0}
    sthp = "!f() { git stash show -p stash@{$1}; }; f"

    # delete stash@{somenumber}
    # Usage: git sthd 0  --> delete stash@{0}
    sthd = "!f() { git stash drop stash@{$1}; }; f"

    # save stash with message
    # Usage: git shds "message"
    sths = stash save 

    # save stash with selective content with message
    sthsp = stash save --patch

    # log commands
    lg = !git log --graph --pretty=format:'%C(bold blue)%h%C(reset)∑%C(bold green)%d%C(reset) %C(cyan)%s%C(reset) %C(red)[%an]%C(reset) %C(white)[%cr]%C(reset)' | column -t -s '∑'
    
    # diff commands
    # http://stackoverflow.com/questions/3293607/difference-between-git-head-and-the-current-project-state
    
    # Shows changes in working directory since your last commit; 
    # i.e same as diff for "git commit -a".
    dflc = diff HEAD
    
    # Shows changes between the index and your last commit; 
    # i.e same as diff "git commit" without the "-a" option.
    # Since 1.6.1 and later. Previous version --cached
    dfsc = diff --staged
    
    # Shows changes in the working directory that are not yet staged 
    # for the next commit. 
    # This is the opposite of git dflc
    df = diff

    # Shows incoming commits for current branch only
    incoming = !(git fetch --quiet && git log ..$(git rev-parse --abbrev-ref --symbolic-full-name @{u})) 
    # Shows incoming commits for all branchs 
    incomingall = !git log --remotes=origin --not --branches
    # Shows outgoing commits for current branch only
    outgoing = !(git fetch --quiet && git log $(git rev-parse --abbrev-ref --symbolic-full-name @{u})..)
    # Shows outgoing commits for all branches 
    outgoingall = !git log --branches --not --remotes=origin

    # show when a file was introduced
    # Usage: git whenwasfileadded myfile
    whenwasfileadded = !git log --diff-filter=A --pretty=short 

    # Reset 1 file
    # Usage: git reset1f2orig myfile.txt
    reset1f2orig = !git checkout HEAD --

[include]
    # Requires git 1.7.10+
    path = .gitconfig-custom
