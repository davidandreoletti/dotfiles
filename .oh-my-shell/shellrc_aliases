#
# Cross shell aliases definitions
#

# Shell aliases
alias mv='mv -v'
alias rm='rm -i'

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
    colorflag="--color"
else # OS X `ls`
    colorflag="-G"
fi
# List all files colorized in long format, including dot files
alias ll="ls -laHF ${colorflag}"
# List only directories
alias lsd="ls -lHF ${colorflag} | grep --color=never '^d'"
# List files colorized
alias ls="command ls ${colorflag}"

# tree command alias
alias tree='tree -aC --dirsfirst "$@" | less -FRNX'

# Backup file/dir with simple "-xxx" suffix
duplicate_with_simple_numbering() {
    local relsrcfile=`echo "$1" | sed -e 's#/$##'`
    local abssrcfile=`pwd`"/$relsrcfile"
    local suffixdelimiter="-"

    # Find next free number
    local number=0;
    local suffix
    until [ ! -e "$relsrcfile$suffix" ];
    do
        numberformat=`printf "%03i" $number`
        suffix="$suffixdelimiter$numberformat"
        number=$((number + 1))
    done

    echo "$relsrcfile -> $relsrcfile$suffix"
    cp -rfp $relsrcfile{,$suffix}
}
alias backup="duplicate_with_simple_numbering"

# Mark directory to not be backup by rsync (for consumption by my own custom rsync backup script)
alias backup-ignore="echo \"- /*\" > .backup.ignore"

# cd aliases
## http://serverfault.com/a/28649
function _cd_up_to_nth_dir {
  local d=""
  limit=$1
  for ((i=1 ; i <= limit ; i++))
    do
      d=$d/..
    done
  d=$(echo $d | sed 's/^\///')
  if [ -z "$d" ]; then
    d=..
  fi
  command cd $d
}
alias up='_cd_up_to_nth_dir'
alias cd..='_cd_up_to_nth_dir'

## builtin cd equivalent using pushd/popd
# Behaviour:
# cd2 - ==> same as builtin cd -
# cd2 foo ==> same as builtin cd foo
# cd2 ==> same as builtin cd
# src: https://gist.github.com/mbadran/130469
function _cd_pushd {
    if (("$#" > 0)); then
        if [ "$1" == "-" ]; then
            pushd > /dev/null
        else
            pushd "$@" > /dev/null
        fi
    else
        cd $HOME
    fi
}

function _cd_popd {
    local number=0
    if (("$#" > 0)); then
       number=$1 
    fi

    local i=0
    number=$(($number - 1))
    while [ "$i" -lt "$number" ];
    do
        popd > /dev/null
        i=$(($i + 1))
    done
}

## Show current directory stack
alias cds='dirs -v'
## Clear directory stack
alias cdsc='dirs -c'
## Use cd with pushd
alias cd='_cd_pushd'
alias cd-='_cd_pushd -'
## Use cd with popd
for i in {1..20}; do alias cd$i="_cd_popd $i"; done

# Compression aliases
alias xt='unp'

# Git alias
alias gtlg='git lg'
alias gtdf='git diff'
alias gtps='git push'
alias gtpl='git pull'
alias gtst='git status'

# Mercurial alias
alias hgsm='hg summary'
alias hgst='hg status'
alias hglg='hg log -G --template "{rev}:{node}:{branch}\n{author}\n{desc|firstline}\n\n" | more'

alias telnet-big5='luit -encoding big5 telnet'

# Bash Usages
function check_()
{
cut -f1 -d" " $1 | sort | uniq -c | sort -nr | head -n 30
}
alias mybashusage='check_ ~/.bash_history'
alias myzshusage='check_ ~/.zsh_history'

# ff:  to find a file under the current directory
ff () { find . -name "$@" ; }

# grepfind: to grep through files found by find, e.g. grepf pattern '*.c'
# note that 'grep -r pattern dir_name' is an alternative if want all files 
ffwithPattern_() { find . -type f -name "$2" -print0 | xargs -0 grep "$1" ; }
# I often can't recall what I named this alias, so make it work either way: 
alias ffp='ffwithPattern_'

# grepfind: grep the whole dir
alias ffpg='egrep -R $1'

## Finds directory sizes and lists them for the current directory
function dirsize_()
{
du -shx * .[a-zA-Z0-9_]* 2> /dev/null | \
egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
egrep '^ *[0-9.]*M' /tmp/list
egrep '^ *[0-9.]*G' /tmp/list
rm /tmp/list
}
alias dirsize='dirsize_'

# Get http headers
function http_headers() { /usr/bin/curl -I -L $@ ; }

# Swap two files together
function swapthem()
{
    local TMPFILE=tmp.$$
    [ $# -ne 2 ] && echo "swap: 2 arguments needed" && return 1
    [ ! -e $1 ] && echo "swap: $1 does not exist" && return 1
    [ ! -e $2 ] && echo "swap: $2 does not exist" && return 1
    mv "$1" $TMPFILE
    mv "$2" "$1"
    mv $TMPFILE "$2"
}

# Indicate what application is binded to port $1
alias whoisbindedonport='lsof -i :$1'

# pbcopy/pbpaste: Take standard input and place it in the system clipboard
# (to paste into other applications)
# src: http://jetpackweb.com/blog/2009/09/23/pbcopy-in-ubuntu-command-line-clipboard/
os_type_name=`get_os_type`
if [[ "$os_type_name" == "linux" ]]; then
    xclippresent=`command -v xclip >/dev/null 2>&1; echo $?`
    xselpresent=`command -v xsel >/dev/null 2>&1; echo $?`
    if [[ ${xclippresent} == 0 ]]; then
        alias pbcopy='xclip -selection clipboard'
        alias pbpaste='xclip -selection clipboard -o'
    elif [[ ${xselpresent} == 0 ]]; then
        alias pbcopy='xsel --clipboard --input'
        alias pbpaste='xsel --clipboard --output'
    fi
    unset xclippresent
    unset xselpresent
fi
unset os_type_name

# Get week number
alias week='date +%V'

# Maven
alias mvnjavadoc='mvn javadoc:javadoc'

# Android
#
alias adbclog='adb logcat -c && adb logcat'

f_noobfuscatedstacktraceandroid() {
    '$ANDROID_HOME/tools/proguard/bin/retrace.sh -verbose "$1" "$2"'
}

# Print unbofuscated stacktrace
# Usage: androidShowPlaintextStacktrace "proguard_mapping.txt" "obfucated_stacktrace.txt"
alias androidShowPlaintextStacktrace='f_noobfuscatedstacktraceandroid $1 $2'

# List AndroidManifest.xml file data
# Usage: showAndroidManifest some.apk
alias showAndroidManifest='aapt l -a '

# Reset android logs and terminal
alias resetAndroidDebuTerminal="clear; tmux clear-history; adb logcat -c; adb logcat"

# Take screenshot of Android device screen
# src: http://blog.shvetsov.com/2013/02/grab-android-screenshot-to-computer-via.html
# usage: androidTakeScreenshot screenshot.png
alias androidTakeScreenshot="adb shell screencap -p | perl -pe 's/\x0D\x0A/\x0A/g' > $1"

# Xcode
# http://stackoverflow.com/a/18933476/219728
alias xcodePurgeDerivedData='rm -rf ~/library/Developer/Xcode/DerivedData/*'

# SSH
#
alias ssh_key_generate_rsa_4096='ssh-keygen -t rsa -b 4096'
alias ssh_key_protect='chmod 700'
#Typically you want the .ssh directory permissions to be 700 (drwx------) and the public key (.pub file) to be 644 (-rw-r--r--). Your private key (id_rsa) should be 600 (-rw-------).

# Load shell specific aliases
SHELLRC_ALIAS_SHELL_FILE="${SHELLRC_DIR}/${SHELL_NAME}/shellrc_alias"
[[ -s ${SHELLRC_ALIAS_SHELL_FILE} ]] && source "${SHELLRC_ALIAS_SHELL_FILE}"

# Backups
# for duplicity based backups
alias backupignoredir="touch .backup.ignore"

# Replay last command with sudo
# src: https://twitter.com/liamosaur/status/506975850596536320
alias fuck='sudo $(history -p \!\!)' 

alias printShellVariables='(set -o posix; set)'

# Update already installed brew packages
alias brew-dist-upgrade="brew update; brew upgrade \`brew outdated\`"

# Download web page (included CSS)
# Usage: downloadCompleteWebpage http://example.com/mypage.html
# Src: https://apple.stackexchange.com/questions/100570/getting-files-all-at-once-from-a-web-page-using-curl
alias downloadCompleteWebpage='wget -r -np -k ' 
[ -x "$(command -v nvim)" ] && alias vim='nvim'
