[core]
    # macOS APFS/HFS & Linux ext4 support executable bit
    filemode = true
    editor = vim
    excludesFile = ~/.config/git/ignore
    quotePath = true
    logAllRefUpdates = true
    trustctime = true

	# Centralized Git hooks
	# Requires git 2.9+
	hooksPath = ~/.config/git/hooks
    # Default pager 
    pager = "~/bin/git-pager.sh delta"

[pager]
    # Color
	diff = "~/bin/git-pager.sh delta"
    log =  "~/bin/git-pager.sh delta"
    show = "~/bin/git-pager.sh delta"
    blame = "~/bin/git-pager.sh delta"

[interactive]
    diffFilter = "~/bin/git-pager.sh delta --color-only --features=interactive"

[commit]
    # Show unified diff between the HEAD commit and what would be committed at the
    # bottom of the commit message template to help the user describe the commit 
    # by reminding what changes the commit has
    # src: https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---verbose
    verbose = true

[push]
    # Push CURRENT branch to upstream branch
    # - works if both branchs have different names or same names
    # http://longair.net/blog/2011/02/27/an-asymmetry-between-git-pull-and-git-push/
    default = "upstream"
    # Push tags assoctiod to the pushed branch
    # - equivalent to --follow-tags 
    followTags = true

[color]
    # By default, all non machine oriented outputs are colored
    # - terminal output will be colored
    ui = auto
    # Diff outputs are always colored
    # Required by:
    # - diff-highlight
    diff = auto

[color "diff-highlight"]
    # Hightligh modified words in diff's output
    # https://www.viget.com/articles/dress-up-your-git-diffs-with-word-level-highlights/
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[diff]
    # Produce diff using patience algorithm with additional support for "low-occurrence common elements"
    # - Net result is diff are, generally, more intuitive; it reconciles better the misaligned brackets in functions and tags.
    algorithm = histogram
    # git diff detects renames and copies
    renames = copies
    # Number of lines of context in patches
    context = 6
    # color moved
    colorMoved = default

[diff "spaceman-diff"]
    # Diff images as ASCII like images
    # spaceman-diff is expected to be on the $PATH
    command = spaceman-diff

[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C


[branch]
    # By default, "git pull" will REBASE (instead merge) the local branch created with "git checkout" / "git branch" when the local branche tracking these branches:
    # - remote branches 
    # - local branches
    autoSetupRebase = always
    # By default, track branches created with "git checkout" / "git branch" when starting from these branches:
    # - remote branches 
    # - local branches 
    autoSetupMerge = always

[pull]
    # Rebase branches on top of the fetched branch, instead of merging the default branch from the default remote when "git pull" is run.
    # - merges: rebase using git rebase --rebase-merges so that the local merge commits are included in the rebase
    # --- BUT DANGEROUS, read https://git-scm.com/docs/git-rebase#_bugs first.
    rebase = merges

[merge]
    # Merge conflict tool, in order of preference
    # Defaults: git mergetool --tool-help
    tool = opendiff,vimdiff
    # Show common ancestor in conflicts markers
    # - text in between ||||||| marker and ======= marker represent the command ancestor code
    conflictstyle = diff3

[log]
	date = iso

[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[mergetool]
    # Delete merge backup files (as .orig files)
    # After performing a merge, the original file with conflict markers can be saved as a file with a .orig extension. 
    keepBackup = false
    # Do not prompt before each invocation of the merge resolution program
    prompt = false

[repack]
    # Use delta offset when repacking 
    # Requires: git 1.4.4+
    usedeltabaseoffset = true

[help]
    # Show correct command version but do not exectude it when mistyped
    autocorrect = 0

[rerere]
    # Enable rerere by default (instead of on first use of git rerere)
    enabled = true

[status]
    # Show relative path, relative to current directory (instead of repository root)
    relativePaths = true
    # Show submodule status
    submodulesummary = true
    # Show number of entries stashed away
    showStash = true

[tag]
    sort = version:refname
    # GPG sign annotated tags
    forceSignAnnotated = false

[format]
    subjectPrefix = "PATCH"
    # Certify you have the rights to submit this work under the project's guidelines
    signOff = true

[commit]
    gpgsign = false

[gpg]
    # Default key format when signing
    format = openpgp
    # Use gnupg
    program = gpg

[delta]
    navigate = true # use n and N to move between diff sections
    light = false   # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
    line-numbers = true
    side-by-side = false
    hyperlinks = true
    # When 24bit / true color is supported, then COLORTERM should be. It is not in Tmux
    # force truecolor
    true-color = always

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

[user]
    # Setup no default signing key
    signingkey = NO_DEFAULT_KEY_FINGERPRINT
    # Require user.name / user.email to be set
    # - never guess the user/email from the environment
    useConfigOnly = true

[init]
    # "master" as default branch name.
    defaultBranch = "master"
    # Files and folders copied to GIT_DIR after it is created (ie git clone)
    templatedir = ~/.config/git/templates

[includeIf "gitdir:/Users"]
    path = ~/.config/git/config_macos
[includeIf "gitdir:/home"]
    path = ~/.config/git/config_linux

[include]
    #
    # Aliases
    #
    # Popular git aliases
    path = ~/.config/git/aliases/gitaliases
    # Common profile git aliases
    path = ~/.config/git/aliases/common

    #
    # Profiles
    #
    path = ~/.config/git/profiles/config_all

    #
    # Local config
    #
    path = ~/.config/git/config_local
