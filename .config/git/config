[core]
    # macOS APFS/HFS & Linux ext4 support executable bit
    filemode = true
    editor = vim
    excludesFile = ~/.config/git/ignore
    quotePath = true
    logAllRefUpdates = true
    trustctime = true

	# Centralized Git hooks
	# Requires git 2.9+
	hooksPath = ~/.config/git/hooks
    # Default pager
    pager = "~/.bin/git-pager.sh delta"

[pager]
    # Color/Syntax highlighting support
	diff = "~/.bin/git-pager.sh delta"
    log =  "~/.bin/git-pager.sh delta"
    show = "~/.bin/git-pager.sh delta"
    blame = "~/.bin/git-pager.sh delta"

    # Turns on pagination for cmd='git difftool' when writing to a tty.
    # Otherwise, turns on pagination for the subcommand using the pager
    # specified by the value of pager.<cmd>.
    #
    # If --paginate or --no-pager is specified on the command line, it
    # takes precedence over this option.
    #
    # To disable pagination for all commands, set core.pager or GIT_PAGER to cat.
    difftool = true

[interactive]
    diffFilter = "~/.bin/git-pager.sh delta --color-only --features=interactive"

[commit]
    # Show unified diff between the HEAD commit and what would be committed at the
    # bottom of the commit message template to help the user describe the commit
    # by reminding what changes the commit has
    # src: https://git-scm.com/docs/git-commit#Documentation/git-commit.txt---verbose
    verbose = true
    gpgsign = false

[push]
    # Push CURRENT branch to upstream branch
    # - works if both branchs have different names or same names
    # http://longair.net/blog/2011/02/27/an-asymmetry-between-git-pull-and-git-push/
    default = "upstream"
    # Push tags assoctiod to the pushed branch
    # - equivalent to --follow-tags
    followTags = true
    # Add --set-upstream on default push when no upstream tracking exists for the current branch.
    # - takes effect with push.default options simple, upstream, and current
    #
    # It is useful if by default you want new branches to be pushed to the default remote
    # (like the behavior of push.default=current) and you also want the upstream tracking
    # to be set.
    autoSetupRemote = true

[color]
    # By default, all non machine oriented outputs are colored
    # - terminal output will be colored
    ui = auto
    # Diff outputs are always colored
    # Required by:
    # - diff-highlight
    diff = auto

[color "diff-highlight"]
    # Hightligh modified words in diff's output
    # https://www.viget.com/articles/dress-up-your-git-diffs-with-word-level-highlights/
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22

[diff]
    # Produce diff using patience algorithm with additional support for "low-occurrence common elements"
    # - Net result is diff are, generally, more intuitive; it reconciles better the misaligned brackets in functions and tags.
    algorithm = histogram
    # git diff detects renames and copies
    renames = copies
    # Number of lines of context in patches
    context = 6
    # color moved
    colorMoved = default
    # "log" format lists the commits in the range like git-submodule[1] summary does
    submodule = "log"
    # Use difftastic instead of 'merge.tool'
    tool = difftastic

[difftool]
    # Prompt before each invocation of the diff tool.
    prompt = false
    # Exit difftool when the invoked diff tool returns a non-zero exit status.
    trustExitCode = true

[diff "difftastic"]
    cmd = difft "$LOCAL" "$REMOTE"

[diff "spaceman-diff"]
    # Diff images as ASCII like images
    # spaceman-diff is expected to be on the $PATH
    command = spaceman-diff

[diff "bin"]
    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C


[branch]
    # By default, "git pull" will REBASE (instead merge) the local branch created with "git checkout" / "git branch" when the local branche tracking these branches:
    # - remote branches
    # - local branches
    autoSetupRebase = always
    # By default, track branches created with "git checkout" / "git branch" when starting from these branches:
    # - remote branches
    # - local branches
    autoSetupMerge = always

[pull]
    # Rebase branches on top of the fetched branch, instead of merging the default branch from the default remote when "git pull" is run.
    # - merges: rebase using git rebase --rebase-merges so that the local merge commits are included in the rebase
    # --- BUT DANGEROUS, read https://git-scm.com/docs/git-rebase#_bugs first.
    rebase = merges

[rebase]
    # Automatically add --autosquash to 'git rebase'
    # Workflow:
    #  - git commit -m "add parsing code"
    #  - git commit --fixup OLD_COMMIT_ID =>  new commit has commit message "fixup! add parsing code"`
    #  - git rebase --autosquash main     =>  automatically combine all the fixup! commits with THEIR targets
    autosquash = true

[merge]
    # Merge conflict tool, in order of preference
    # Defaults: git mergetool --tool-help
    # - *vimdiff2: Use *vim with a 3 panes layout (LOCAL, MERGED and REMOTE)
    tool = nvimdiff2,vimdiff2
    guitool = opendiff
    # Show common ancestor in conflicts markers
    # - text in between ||||||| marker and ======= marker represent the command ancestor code
    # - more common lines out of these markers
    conflictstyle = zdiff3

[log]
	date = iso

[pretty]
    custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
    #                     │        │            │            │             └─ author name
    #                     │        │            │            └─ message
    #                     │        │            └─ date (relative)
    #                     │        └─ decorations (branch, heads or tags)
    #                     └─ hash (abbreviated)

[mergetool]
    # Delete merge backup files (as .orig files)
    # After performing a merge, the original file with conflict markers can be saved as a file with a .orig extension.
    keepBackup = false
    # Do not prompt before each invocation of the merge resolution program
    prompt = false

[repack]
    # Use delta offset when repacking
    # Requires: git 1.4.4+
    usedeltabaseoffset = true

[help]
    # Show correct command version but do not exectude it when mistyped
    autocorrect = 0

[rerere]
    # Enable rerere by default (instead of on first use of git rerere)
    enabled = true

[status]
    # Show relative path, relative to current directory (instead of repository root)
    relativePaths = true
    # Show submodule status
    submodulesummary = true
    # Show number of entries stashed away
    showStash = true

[tag]
    sort = version:refname
    # GPG sign annotated tags
    forceSignAnnotated = false

[format]
    subjectPrefix = "PATCH"
    # Certify you have the rights to submit this work under the project's guidelines
    signOff = true

[gpg]
    # Default key format when signing
    format = openpgp
    # Use gnupg
    program = gpg

[delta]
    navigate = true # use n and N to move between diff sections
    light = false   # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
    line-numbers = true
    side-by-side = false
    hyperlinks = true
    # When 24bit / true color is supported, then COLORTERM should be. It is not in Tmux
    # force truecolor
    true-color = always

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
    hunk-header-decoration-style = cyan box ul

[delta "line-numbers"]
    line-numbers-left-style = cyan
    line-numbers-right-style = cyan
    line-numbers-minus-style = 124
    line-numbers-plus-style = 28

[absorb]
    # git-absord configuration
    # - https://github.com/tummychow/git-absorb

    # Workflow
    # $ git log
    # aaaa commit_file_a
    # bbbb commit_file_b
    # $ vim file_a
    # $ git add file_a
    # $ git-absorb
    #   ccccc fixup! commit_file_a
    # $ git git rebase --interactive --autosquash HEAD~10
    # $ git log
    # aaaa commit_file_a         <<<< file_a has the new modifications
    # bbbb commit_file_b#

    # max range to search for candidate commits to fixup
    maxStack = 25
    # Create multiple fixup commit for the same candidate commit rather than 1 fixup commits for all hunks
    # to be absorbed in the same candidate commit
    oneFixupPerCommit = false
    # Hunks to be fixup always come from staged area
    autoStageIfNothingStage = false

[fixup]
    # git-fixup configuration
    # - https://github.com/keis/git-fixup

    # Workflow
    # $ git log
    # aaaa commit_file_a
    # bbbb commit_file_b
    # $ vim file_a
    # $ git add file_a
    # $ git-fixup
    #   ccccc fixup! commit_file_a
    # $ git git rebase --interactive --autosquash HEAD~10
    # $ git log
    # aaaa commit_file_a         <<<< file_a has the new modifications
    # bbbb commit_file_b#

    # Use closest ancestor branch by default
    # - allows to create fixup commit for stuff already committed on a feature branch
    #base = closest
    # Create fixup commit by default
    # - easier to review fixup commits
    action = fixup
    # (true) display commit menu instead commit list by default
    commit = true
    # (false) no git rebase call after git commit call
    rebase = false
    # Enable fzf based commit menu, instead of commit list
    menu = fzf --height '60%' \
                --bind 'tab:toggle-preview' \
                --preview 'git show --color {+1}' \
                --preview-window=up:80% \
                --prompt 'Select commit: '

[user]
    # Setup no default signing key
    signingkey = NO_DEFAULT_KEY_FINGERPRINT
    # Require user.name / user.email to be set
    # - never guess the user/email from the environment
    useConfigOnly = true

[transfer]
    # Prevent as much data corruption case as possible
    # When set, the fetch or receive will abort in the case of:
    # - a malformed object
    # - a link to a nonexistent object.
    # - various other issues  checked for, including legacy issues:
    #   - (see fsck.<msg-id>)
    # - potential security issues like:
    #   - the existence of a .GIT directory
    #   - a malicious .gitmodules file (see the release notes for v2.2.1 and v2.17.1 for details).
    # - Other sanity and security checks may be added in future releases.
    #
    # Set fetch.fsckObjects = true or receive.fsckObjects = true when undefined
    fsckObjects = true

[init]
    # "master" as default branch name.
    defaultBranch = "master"
    # Files and folders copied to GIT_DIR after it is created (ie git clone)
    templatedir = ~/.config/git/templates

[includeIf "gitdir:/Users"]
    path = ~/.config/git/config_macos
[includeIf "gitdir:/home"]
    path = ~/.config/git/config_linux

[include]
    #
    # Aliases
    #
    path = ~/.config/git/aliases/config_all

    #
    # Profiles
    #
    path = ~/.config/git/profiles/config_all

    #
    # Local config
    #
    path = ~/.config/git/config_local
