#!/bin/bash

SOURCE_PLAYLIST_DIR="$HOME/.playlists"
DESTINATION_PLAYLIST_DIR="$HOME/.config/mpd/playlists"

f_mpd_update_database() {
    echo "Updating playlists ..."
    # Create/Update playlists
    command pushd "$SOURCE_PLAYLIST_DIR" >/dev/null 2>&1
    # Download music m3u files
    $SHELL to_m3u.sh *.playlist
    # Create missing dir if any
    mkdir -p "$DESTINATION_PLAYLIST_DIR"

    for m3u_file in *.m3u; do
        playlist_name="$(basename $m3u_file .m3u)"

        # Convert stream urls into new playlist
        if [[ "$playlist_name" == "programming" ]]; then
            command cat <($SHELL convert.sh $m3u_file) >"$DESTINATION_PLAYLIST_DIR/${playlist_name}.m3u"
        else
            mv "$PWD/$m3u_file" "$DESTINATION_PLAYLIST_DIR/${playlist_name}.m3u"
        fi
    done
    command popd >/dev/null 2>&1

    # Remove duplicate musics
    #mpc playlist | sort | uniq -d -c | while read song; do count=$(echo "$song" | sed -e "s/^[ \t]*//" | cut -d" " -f1); song=$(echo "$song" | sed -e "s/^[ \t]*//" | cut -d" " -f2-); for (( i = 2 ; i <= $count; i++ )); do mpc playlist | grep -n "$song" | tail -n 1 | cut -d: -f1 | mpc del; done; done
}

f_mpd_play() {
    # List playlists available
    echo "** Available playlists **"
    mpc ls

    echo ""
    echo "** Playing music **"
    mpc play
}

while true; do
    case "$1" in
        --update)
            f_mpd_update_database
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            if ! test -d "$DESTINATION_PLAYLIST_DIR";
            then
                f_mpd_update_database
            fi
            f_mpd_play
            break
            ;;
    esac
done
